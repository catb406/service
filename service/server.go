package service

import (
	"SB/service/repository/db"
	"SB/service/repository/messenger"
	"SB/service/repository/token"
	"SB/service/repository/training"
	_ "SB/service/service/docs" // docs generated by Swag CLI
	"SB/service/service/handlers"
	"github.com/labstack/echo/v4"
	"github.com/labstack/echo/v4/middleware"
	echoSwagger "github.com/swaggo/echo-swagger"
)

type (
	serverImpl struct {
		serverApi *echo.Echo
		address   string
		port      string
		handler   handlers.Handler
	}

	Server interface {
		Start()
		Stop()
		ServerApi() *echo.Echo
	}
)

func NewServer(address string, port string, usrMgr db.UserManager, tknMgr token.TokenManager, trainingMgr training.TrainingManager, messenger messenger.Messenger) Server {
	handler := handlers.NewHandler(usrMgr, tknMgr, trainingMgr, messenger)
	return &serverImpl{
		address: address,
		port:    port,
		handler: handler,
	}
}

//Start run REST server
func startServer(e *echo.Echo, address string, port string) {
	e.Logger.Fatal(e.Start(address + ":" + port))
}

// @title SB API
// @version 1.0

// @host localhost:3000
// @BasePath /
func (srv *serverImpl) Start() {
	e := echo.New()

	e.Use(middleware.Logger())
	e.Use(middleware.Recover())

	e.Use(middleware.CORS())
	e.GET("/swagger/*", echoSwagger.WrapHandler)

	e.POST("/auth/login", srv.handler.LoginHandler)
	e.POST("/auth/logout", srv.handler.LogoutHandler, srv.handler.AccessMiddleware)
	e.POST("/auth/signup", srv.handler.SignupHandler)
	e.Any("/auth/refresh", srv.handler.RefreshToken)

	user := e.Group("/user")
	user.DELETE("/:id", srv.handler.DeleteUserHandler, srv.handler.AccessMiddleware)

	profile := user.Group("/profile")
	profile.GET("/:id", srv.handler.GetUserProfileHandler, srv.handler.AccessMiddleware)
	profile.PUT("", srv.handler.UpdateUserProfileHandler, srv.handler.AccessMiddleware)

	groupTraining := e.Group("/training")
	groupTraining.GET("/profiles", srv.handler.GetProfilesHandler, srv.handler.AccessMiddleware)
	groupTraining.GET("", srv.handler.GetGroupTrainingsHandler, srv.handler.AccessMiddleware)
	groupTraining.POST("", srv.handler.AddGroupTrainingHandler, srv.handler.AccessMiddleware)
	groupTraining.GET("/:id", srv.handler.GetTrainingHandler, srv.handler.AccessMiddleware)
	groupTraining.PUT("/:id", srv.handler.UpdateGroupTrainingHandler, srv.handler.AccessMiddleware)
	groupTraining.DELETE("/:id", srv.handler.DeleteGroupTrainingHandler, srv.handler.AccessMiddleware)

	msg := e.Group("/messenger")
	msg.Any("", srv.handler.MessengerHandler, srv.handler.AccessMiddleware)
	msg.GET("/dialogs", srv.handler.GetDialogsHandler, srv.handler.AccessMiddleware)
	msg.GET("/messages", srv.handler.GetMessagesHandler, srv.handler.AccessMiddleware)
	msg.POST("/request", srv.handler.SendRequestHandler, srv.handler.AccessMiddleware)
	msg.PUT("/request/reply", srv.handler.ReplyToRequestHandler, srv.handler.AccessMiddleware)
	msg.PUT("/request/seen", srv.handler.DeclinedRequestSeenHandler, srv.handler.AccessMiddleware)

	srv.serverApi = e
	startServer(e, srv.address, srv.port)
}

func (srv *serverImpl) Stop() {
	srv.serverApi.Close()
}

func (srv *serverImpl) ServerApi() *echo.Echo {
	return srv.serverApi
}
