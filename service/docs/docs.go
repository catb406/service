// Package docs GENERATED BY THE COMMAND ABOVE; DO NOT EDIT
// This file was generated by swaggo/swag
package docs

import (
	"bytes"
	"encoding/json"
	"strings"
	"text/template"

	"github.com/swaggo/swag"
)

var doc = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "contact": {},
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/auth/login": {
            "post": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Auth"
                ],
                "summary": "Login a user",
                "operationId": "authLogin",
                "parameters": [
                    {
                        "description": "The body to login a user",
                        "name": "Body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/UserLoginParams"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/LoginResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    }
                }
            }
        },
        "/auth/logout": {
            "post": {
                "tags": [
                    "Auth"
                ],
                "summary": "Logout a user",
                "operationId": "authLogout",
                "responses": {
                    "200": {
                        "description": "Logout successfully",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    }
                }
            }
        },
        "/auth/refresh": {
            "post": {
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Auth"
                ],
                "summary": "Refresh access token",
                "operationId": "authRefreshToken",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/LoginResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    }
                }
            }
        },
        "/auth/signup": {
            "post": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Auth"
                ],
                "summary": "Sign up a user",
                "operationId": "authSignup",
                "parameters": [
                    {
                        "description": "The body to sign up a user",
                        "name": "Body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/UserLoginParams"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/LoginResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    }
                }
            }
        },
        "/messenger/dialogs": {
            "get": {
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Messenger"
                ],
                "summary": "Get user's dialogs and requests",
                "operationId": "getDialogs",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/handlers.Request"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    }
                }
            }
        },
        "/messenger/messages": {
            "get": {
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Messenger"
                ],
                "summary": "Get dialog",
                "operationId": "getMessages",
                "parameters": [
                    {
                        "description": "filter to display messages (id_users have to contain to ID, if created_after not defined - considered as current moment)",
                        "name": "Body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/handlers.MessagesFilter"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/handlers.Message"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    }
                }
            }
        },
        "/messenger/request/reply": {
            "put": {
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Messenger"
                ],
                "summary": "Accept or decline friendship or joining a group training request",
                "operationId": "replyToRequest",
                "parameters": [
                    {
                        "description": "The body of a request - status : declined/accepted",
                        "name": "Body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/handlers.Request"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    }
                }
            }
        },
        "/messenger/request/seen": {
            "put": {
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Messenger"
                ],
                "summary": "Mark response to a request as seen",
                "operationId": "seenRequestReply",
                "parameters": [
                    {
                        "description": "The body of a request - seen : true",
                        "name": "Body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/handlers.Request"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    }
                }
            }
        },
        "/training": {
            "get": {
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Training"
                ],
                "summary": "Get group trainings filtered by provided parameters",
                "operationId": "getFilteredTrainings",
                "parameters": [
                    {
                        "description": "The body to filter group trainings",
                        "name": "Body",
                        "in": "body",
                        "schema": {
                            "$ref": "#/definitions/training.GroupTrainingFilter"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/training.GroupTraining"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    }
                }
            },
            "post": {
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Training"
                ],
                "summary": "Add group training",
                "operationId": "addGroupTraining",
                "parameters": [
                    {
                        "description": "The body to add a group training",
                        "name": "Body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/training.GroupTraining"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "object"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    }
                }
            }
        },
        "/training/profiles": {
            "get": {
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Training"
                ],
                "summary": "Get users profiles filtered by provided parameters",
                "operationId": "userGetFilteredProfiles",
                "parameters": [
                    {
                        "description": "The body to filter users profiles",
                        "name": "Body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/UserProfileFilterParams"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/FilteredProfile"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    }
                }
            }
        },
        "/training/{id}": {
            "get": {
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Training"
                ],
                "summary": "Get training by id",
                "operationId": "getTrainingByID",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/training.GroupTraining"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    }
                }
            },
            "put": {
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Training"
                ],
                "summary": "Update group training",
                "operationId": "updateGroupTraining",
                "parameters": [
                    {
                        "description": "The body to update a group training",
                        "name": "Body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/training.GroupTraining"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "object"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    }
                }
            },
            "delete": {
                "tags": [
                    "Training"
                ],
                "summary": "Delete group training",
                "operationId": "deleteGroupTraining",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    }
                }
            }
        },
        "/user/contacts/{id}": {
            "delete": {
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Messenger"
                ],
                "summary": "Remove user from contacts",
                "operationId": "removeFromContacts",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    }
                }
            }
        },
        "/user/profile": {
            "put": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Profile"
                ],
                "summary": "Update user profile",
                "operationId": "userUpdateProfile",
                "parameters": [
                    {
                        "description": "The body to update user profile",
                        "name": "Body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/UserProfile"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "user profile successfully updated",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    }
                }
            }
        },
        "/user/profile/{id}": {
            "get": {
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Profile"
                ],
                "summary": "Get user profile",
                "operationId": "userGetProfile",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/UserProfile"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    }
                }
            }
        },
        "/user/requests": {
            "post": {
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Messenger"
                ],
                "summary": "Send friendship or joining a group training request",
                "operationId": "sendRequest",
                "parameters": [
                    {
                        "description": "The body of a request",
                        "name": "Body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/handlers.Request"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    }
                }
            }
        },
        "/user/{id}": {
            "delete": {
                "tags": [
                    "Profile"
                ],
                "summary": "Delete user",
                "operationId": "userDeleteProfile",
                "responses": {
                    "200": {
                        "description": "user successfully deleted",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    }
                }
            }
        },
        "/user/{id}/trainings": {
            "get": {
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Calendar"
                ],
                "summary": "Get user's trainings",
                "operationId": "getUserTrainings",
                "responses": {
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "ErrorResponse": {
            "type": "object",
            "properties": {
                "message": {
                    "description": "Message about the error",
                    "type": "string",
                    "example": "Operation failed"
                }
            }
        },
        "FilteredProfile": {
            "type": "object",
            "properties": {
                "about": {
                    "description": "Description of a user",
                    "type": "string",
                    "example": "Я люблю бегать"
                },
                "age": {
                    "description": "Date of birth of a user",
                    "type": "integer",
                    "example": 20
                },
                "height": {
                    "description": "Height of a user",
                    "type": "integer",
                    "example": 180
                },
                "id_level": {
                    "description": "Level id. Can be 1 - junior, 2 - middle, 3 - senior",
                    "type": "integer",
                    "example": 1
                },
                "id_user": {
                    "description": "Id of a user",
                    "type": "integer",
                    "example": 709786
                },
                "location": {
                    "description": "Preferred location (metro station)",
                    "type": "string",
                    "example": "Петроградская"
                },
                "name": {
                    "description": "First name of a user",
                    "type": "string",
                    "example": "Андрей"
                },
                "person_sports": {
                    "description": "Kinds of sports of a user",
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "example": [
                        "волейбол"
                    ]
                },
                "second_name": {
                    "description": "Second name of a user",
                    "type": "string",
                    "example": "Попов"
                },
                "sex": {
                    "description": "Sex of a user",
                    "type": "string",
                    "example": "male"
                },
                "weight": {
                    "description": "Weight of a user",
                    "type": "integer",
                    "example": 80
                }
            }
        },
        "LoginResponse": {
            "type": "object",
            "properties": {
                "access_token": {
                    "type": "string",
                    "example": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJleHAiOjE2MzYyMjUxNDcsImp0aSI6IjkxMzQ1NzQ5NzUifQ.hiQUF6DNwoOcYsBvo1-aRVEQShzRMvGYReHWKg6QY4I"
                },
                "id_user": {
                    "description": "Token to access protected pages",
                    "type": "integer",
                    "example": 9338554
                },
                "username": {
                    "type": "string",
                    "example": "andrey"
                }
            }
        },
        "UserLoginParams": {
            "type": "object",
            "properties": {
                "password": {
                    "type": "string",
                    "example": "Password123"
                },
                "username": {
                    "type": "string",
                    "example": "andrey@gmail.com"
                }
            }
        },
        "UserProfile": {
            "type": "object",
            "properties": {
                "about": {
                    "description": "Description of a user",
                    "type": "string",
                    "example": "Я люблю бегать"
                },
                "date_of_birth": {
                    "description": "Date of birth of a user",
                    "type": "string",
                    "example": "2000-01-01T00:00:00Z"
                },
                "email": {
                    "description": "User's e-mail",
                    "type": "string",
                    "example": "andrey@gmail.com"
                },
                "height": {
                    "description": "Height of a user",
                    "type": "integer",
                    "example": 180
                },
                "id_level": {
                    "description": "Level id. Can be 1 - junior, 2 - middle, 3 - senior",
                    "type": "integer",
                    "example": 1
                },
                "id_user": {
                    "description": "Id of a user",
                    "type": "integer",
                    "example": 709786
                },
                "location": {
                    "description": "Preferred location (metro station)",
                    "type": "string",
                    "example": "Петроградская"
                },
                "name": {
                    "description": "First name of a user",
                    "type": "string",
                    "example": "Андрей"
                },
                "second_name": {
                    "description": "Second name of a user",
                    "type": "string",
                    "example": "Попов"
                },
                "sex": {
                    "description": "Sex of a user",
                    "type": "string",
                    "example": "male"
                },
                "sport": {
                    "description": "User's kinds of sport",
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "example": [
                        "волейбол"
                    ]
                },
                "weight": {
                    "description": "Weight of a user",
                    "type": "integer",
                    "example": 80
                }
            }
        },
        "UserProfileFilterParams": {
            "type": "object",
            "properties": {
                "age_from": {
                    "description": "Minimum age of a user  (if -1, then not specified)",
                    "type": "integer",
                    "example": 20
                },
                "age_to": {
                    "description": "Maximum age of a user  (if -1, then not specified)",
                    "type": "integer",
                    "example": 40
                },
                "id_level": {
                    "description": "Level ids",
                    "type": "array",
                    "items": {
                        "type": "integer"
                    },
                    "example": [
                        1
                    ]
                },
                "location": {
                    "description": "Preferred location (metro station)",
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "example": [
                        "Петроградская"
                    ]
                },
                "sex": {
                    "description": "Sex of a user  (if \"\", then not specified)",
                    "type": "string",
                    "example": "male"
                },
                "sport": {
                    "description": "Kinds of sport",
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "example": [
                        "волейбол"
                    ]
                },
                "weight_from": {
                    "description": "Minimum weight of a user  (if -1, then not specified)",
                    "type": "integer",
                    "example": 80
                },
                "weight_to": {
                    "description": "Maximum weight of a user (if -1, then not specified)",
                    "type": "integer",
                    "example": 90
                }
            }
        },
        "handlers.Message": {
            "type": "object",
            "properties": {
                "content": {
                    "type": "string",
                    "example": "Hello!"
                },
                "created_at": {
                    "type": "string",
                    "example": "2021-11-29T00:16:01.367333+03:00"
                },
                "id_from": {
                    "type": "integer",
                    "example": 321
                },
                "id_to": {
                    "type": "integer",
                    "example": 123
                },
                "type": {
                    "type": "string",
                    "example": "personal"
                }
            }
        },
        "handlers.MessagesFilter": {
            "type": "object",
            "properties": {
                "created_after": {
                    "type": "string"
                },
                "id_users": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    }
                }
            }
        },
        "handlers.Request": {
            "type": "object",
            "properties": {
                "created_at": {
                    "type": "string",
                    "example": "2021-11-29T00:16:01.367333+03:00"
                },
                "id_from": {
                    "type": "integer",
                    "example": 321
                },
                "id_to": {
                    "type": "integer",
                    "example": 123
                },
                "seen": {
                    "type": "boolean",
                    "example": false
                },
                "status": {
                    "type": "string",
                    "example": "declined"
                },
                "type": {
                    "type": "string",
                    "example": "personal"
                }
            }
        },
        "training.GroupTraining": {
            "type": "object",
            "properties": {
                "comment": {
                    "type": "string"
                },
                "fee": {
                    "type": "integer"
                },
                "id_level": {
                    "type": "integer"
                },
                "id_training": {
                    "type": "integer"
                },
                "kind": {
                    "type": "string"
                },
                "location": {
                    "type": "string"
                },
                "meet_date": {
                    "type": "string"
                },
                "owner": {
                    "type": "integer"
                },
                "participants_ids": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    }
                },
                "sport": {
                    "type": "string"
                },
                "training_duration": {
                    "type": "string"
                }
            }
        },
        "training.GroupTrainingFilter": {
            "type": "object",
            "properties": {
                "id_level": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    }
                },
                "location": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "sport": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            }
        }
    }
}`

type swaggerInfo struct {
	Version     string
	Host        string
	BasePath    string
	Schemes     []string
	Title       string
	Description string
}

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = swaggerInfo{
	Version:     "1.0",
	Host:        "localhost:3000",
	BasePath:    "/",
	Schemes:     []string{},
	Title:       "SB API",
	Description: "",
}

type s struct{}

func (s *s) ReadDoc() string {
	sInfo := SwaggerInfo
	sInfo.Description = strings.Replace(sInfo.Description, "\n", "\\n", -1)

	t, err := template.New("swagger_info").Funcs(template.FuncMap{
		"marshal": func(v interface{}) string {
			a, _ := json.Marshal(v)
			return string(a)
		},
		"escape": func(v interface{}) string {
			// escape tabs
			str := strings.Replace(v.(string), "\t", "\\t", -1)
			// replace " with \", and if that results in \\", replace that with \\\"
			str = strings.Replace(str, "\"", "\\\"", -1)
			return strings.Replace(str, "\\\\\"", "\\\\\\\"", -1)
		},
	}).Parse(doc)
	if err != nil {
		return doc
	}

	var tpl bytes.Buffer
	if err := t.Execute(&tpl, sInfo); err != nil {
		return doc
	}

	return tpl.String()
}

func init() {
	swag.Register("swagger", &s{})
}
